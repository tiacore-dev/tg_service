import logging
import os
from dotenv import load_dotenv
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import types
from aiogram import Bot, F, Router
from request import set_late, get_details
from formatters import format_route_info, format_route_page
from utils import slugify, find_route_by_slug

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router_keyboard = Router()


run_chats = os.getenv("ROUTER_CHATS").split(",")
logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {run_chats}")
# ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /keyboard


@router_keyboard.message(F.text == "/keyboard")
async def show_keyboard(message: types.Message):
    user_id = message.from_user.id
    if str(user_id) not in run_chats:
        logger.warning(
            f"Not authorized user trying to get keyboard: {user_id}")
        return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_keyboard())


@router_keyboard.message(F.text == "/remove_keyboard")
async def remove_keyboard(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–∫—Ä—ã–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞!", reply_markup=ReplyKeyboardRemove())

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤ –Ω–∞ –≤—á–µ—Ä–∞")]
        ],
        resize_keyboard=True,  # –£–º–µ–Ω—å—à–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        one_time_keyboard=False  # –û—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    )
    return keyboard


def build_city_pagination_keyboard(number, send_slug, rec_slug):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –∑–∞–¥–µ—Ä–∂–∫–µ",
                                  callback_data=f"late:{number}:{send_slug}:{rec_slug}")]
        ]
    )


async def send_routes(user_id, routes, bot: Bot):
    for route in routes:
        number = route["number"]  # ‚Üê –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä—è–º–æ –æ—Ç—Å—é–¥–∞
        send = slugify(route['sendCity'])
        rec = slugify(route['recCity'])

        text = format_route_info(route)
        await bot.send_message(
            user_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üìã –î–µ—Ç–∞–ª–∏", callback_data=f"details:{number}:{send}:{rec}")],
                    [InlineKeyboardButton(
                        text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –∑–∞–¥–µ—Ä–∂–∫–µ", callback_data=f"late:{number}")]
                ]
            )
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫


@router_keyboard.callback_query(lambda call: call.data.startswith("details"))
async def handle_details(call: types.CallbackQuery):
    try:
        action, number, send_slug, rec_slug = call.data.split(":")
        user_id = call.message.chat.id
        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} —Å –¥–µ–π—Å—Ç–≤–∏–µ–º {action}.")
        details = await get_details(number)
        route = find_route_by_slug(details, send_slug, rec_slug)

        if not route:
            await call.message.edit_text("‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        current_text = call.message.text or call.message.caption
        new_text, _, modified = format_route_page([route], 0, current_text)
        new_markup = build_city_pagination_keyboard(
            number, send_slug, rec_slug)

        markup_changed = dict(new_markup) != (
            dict(call.message.reply_markup) if call.message.reply_markup else None)

        if not modified and not markup_changed:
            await call.answer("üîÑ –£–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return

        await call.message.edit_text(
            text=new_text,
            reply_markup=new_markup,
            parse_mode="Markdown"
        )
        await call.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º: {e}")


@router_keyboard.callback_query(lambda call: call.data.startswith("late"))
async def handle_inline_button(call: types.CallbackQuery):
    user_id = call.message.chat.id
    action, number = call.data.split(':')  # –£–±—Ä–∞–ª–∏ text –∏–∑ callback_data
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} —Å –¥–µ–π—Å—Ç–≤–∏–µ–º {action}.")
    try:

        await call.message.edit_text(
            text=f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ –∑–∞–¥–µ—Ä–∂–∫–µ —Ä–µ–π—Å–∞ {number}?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚úÖ –î–∞", callback_data=f"yes:{number}")],
                [InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç", callback_data=f"no:{number}")],
            ])
        )
        await call.answer()

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∫–Ω–æ–ø–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
@router_keyboard.callback_query(lambda call: call.data.split(':')[0] in ["yes", "no"])
async def handle_yes_no_button(call: types.CallbackQuery):
    user_id = call.message.chat.id
    action, number = call.data.split(':')
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} —Å –¥–µ–π—Å—Ç–≤–∏–µ–º {action}.")
    try:
        if action == "yes":
            await set_late(number)
            await call.message.edit_text(text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞ {number}")

        elif action == "no":
            await call.message.edit_text(text=f"–£–≤–µ–¥–æ–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–µ–π—Å–∞: {number}")

        await call.answer()
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∫–Ω–æ–ø–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
