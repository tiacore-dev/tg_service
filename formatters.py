MAX_MESSAGE_LENGTH = 4096


def format_route_info(data: dict) -> str:
    return (
        f"*üöç –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞:* `{data['number']}`\n"
        f"*üìç –ú–∞—Ä—à—Ä—É—Ç:* {data['name']}\n"
        f"*üë§ –í–æ–¥–∏—Ç–µ–ª—å:* {data['user']}\n"
        f"*üöó –ê–≤—Ç–æ:* {data['auto']}"
    )


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
def format_delivery_type(del_type):
    if "–°–∫–ª–∞–¥-–î–≤–µ—Ä—å" in del_type:
        return "üè† –°–∫–ª–∞–¥-–î–≤–µ—Ä—å"
    elif "–°–∫–ª–∞–¥-–°–∫–ª–∞–¥" in del_type:
        return "üè¢ –°–∫–ª–∞–¥-–°–∫–ª–∞–¥"
    elif "–î–≤–µ—Ä—å-–°–∫–ª–∞–¥" in del_type:
        return "üö™ –î–≤–µ—Ä—å-–°–∫–ª–∞–¥"
    elif "–î–≤–µ—Ä—å-–î–≤–µ—Ä—å" in del_type:  # –î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
        return "üè° –î–≤–µ—Ä—å-–î–≤–µ—Ä—å"
    return del_type  # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è


def format_route_page(data, page, previous_text: str | None = None):
    if page < 0 or page >= len(data):
        return "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", 1, True

    route = data[page]
    send_city = route["sendCity"]
    rec_city = route["recCity"]
    parcels = route["parcels"]

    text = f"üì¶ *–û—Ç–ø—Ä–∞–≤–∫–∞:* {send_city} ‚Üí {rec_city}\n\n"

    if not parcels:
        text += "_–ù–µ—Ç –ø–æ—Å—ã–ª–æ–∫_"
    else:
        for idx, parcel in enumerate(parcels, start=1):
            text += (
                f"{idx}. –ù–æ–º–µ—Ä: {parcel['number']}\n"
                f"üè¢ *{parcel['customer']}*\n"
                f"üö™ *–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:* {format_delivery_type(parcel['delType'])}\n"
                f"üì¶ *–ú–µ—Å—Ç:* {parcel['count']}\n\n"
            )

    text = text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç
    modified = text != (previous_text or "").strip()

    return text, len(data), modified


def split_long_text(text: str, max_length=MAX_MESSAGE_LENGTH) -> list[str]:
    lines = text.split("\n")
    chunks = []
    current = ""

    for line in lines:
        # —É—á—Ç—ë–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        if len(current) + len(line) + 1 > max_length:
            chunks.append(current.strip())
            current = line + "\n"
        else:
            current += line + "\n"

    if current:
        chunks.append(current.strip())

    return chunks
