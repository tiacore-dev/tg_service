import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.types import (
    BotCommand,
    BotCommandScopeDefault,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllGroupChats,
    BotCommandScopeAllChatAdministrators,
    BotCommandScopeChat)
from dotenv import load_dotenv
from handlers import router_main  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º router –∏–∑ handlers
from keyboard import router_keyboard
from logger import logger
from web_app import handle_post_request


# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv('TG_API_TOKEN')
port = os.getenv('PORT')
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º router —Å —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
dp.include_router(router_keyboard)
dp.include_router(router_main)

# Flask-like —Å–µ—Ä–≤–µ—Ä –Ω–∞ Aiohttp
app = web.Application(client_max_size=200 * 1024 ** 2)

app.router.add_post('/sent-message/', handle_post_request)


async def start_web_server():
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PORT: {port}")

    if not port:
        logger.error("‚ùå PORT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –≤ .env")
        return

    try:
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", int(port))  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ `int`
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        await site.start()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")


async def set_bot_commands():
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤—ã—Ö
    # –°–±—Ä–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await bot.set_my_commands([], scope=BotCommandScopeDefault())
    # –°–±—Ä–æ—Å –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
    await bot.set_my_commands([], scope=BotCommandScopeAllPrivateChats())
    # –°–±—Ä–æ—Å –≤ –≥—Ä—É–ø–ø–∞—Ö
    await bot.set_my_commands([], scope=BotCommandScopeAllGroupChats())
    await bot.set_my_commands([], scope=BotCommandScopeAllChatAdministrators())

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    common_commands = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    ]

    # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    special_commands = [
        BotCommand(command="/keyboard", description="–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"),
        BotCommand(command="/remove_keyboard",
                   description="–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"),
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await bot.set_my_commands(common_commands, scope=BotCommandScopeAllPrivateChats())

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    run_chats = os.getenv("ROUTER_CHATS").split(",")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for chat_id in run_chats:
        await bot.set_my_commands(common_commands + special_commands, scope=BotCommandScopeChat(chat_id=int(chat_id)))


async def main():
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    await set_bot_commands()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ Telegram
    await asyncio.gather(
        start_web_server(),  # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    )


if __name__ == "__main__":
    asyncio.run(main())
